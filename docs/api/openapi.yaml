openapi: 3.0.3
info:
  title: Phystech Radio - OpenAPI 3.0
  description: |-
    This is a Phystech Radio specification.
  version: 0.0.1
servers:
  - url: http://localhost:8082
tags:
  - name: Auth
  - name: 'Root: Editors'
  - name: 'Root: Radio'
  - name: 'Library: Media'
  - name: Schedule
  - name: Radio

paths:
  /login:
    post:
      tags:
        - Auth
      summary: login editor
      requestBody:
        description: Login form
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
      responses:
        '200':
          description: Successful authentification
          content:
            application/json:
              schema:
                description: JWT
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Invalid credentials
          content:
            aplication/json:
              schema:
                type: object
                properties: 
                  error:
                    type: string
                    enum:
                      - 'invalid credentials'
                      - 'login required'
                      - 'password required'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /root/editors:
    get:
      description: Get all users
      tags:
        - 'Root: Editors'
      security:
        - rootAuth: []
      responses:
        '200':
          description: All users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Editors'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      description: Create new editor
      tags:
        - 'Root: Editors'
      security:
        - rootAuth: []
      requestBody: 
        description: register form
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginForm'
      responses:
        '200':
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
        '400':
          description: Editor exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - editor exists
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /root/editor/{id}:
    parameters:
      -
        $ref: '#/components/parameters/ID'
    get:
      description: Get editor by id
      tags:
        - 'Root: Editors'
      security:
        - rootAuth: []
      responses:
        '200':
          description: Found editor
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Editor'
        '400':
          description: Editor not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'editor not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      description: Delete editor by id
      tags:
        - 'Root: Editors'
      security:
        - rootAuth: []
      responses:
        '200':
          description: Deleted editor
        '400':
          description: Editor not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'editor not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /library/media:
    get:
      description: Get all info media
      tags:
        - 'Library: Media'
      security:
        - editorAuth: []
      responses:
        '200':
          description: Found editor
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/MediaArray'
        '400':
          description: Editor not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'editor not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      description: Post media with its source
      tags:
        - 'Library: Media'
      security:
        - editorAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media:
                  $ref: '#/components/schemas/MediaRegister'
                source:
                  type: string
                  format: binary
            encoding:
              profileImage:
                contentType: audio/mpeg, audio/mp4
      responses:
        '200':
          description: Uploaded and registered new media
  /library/media/{id}:
    parameters:
      -
        $ref: '#/components/parameters/ID'
    get:
      description: Get media information by id
      tags:
        - 'Library: Media'
      security:
        - editorAuth: []
      responses:
        '200':
          description: Found media
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: Media not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'media not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      description: Delete media and its source by id
      tags:
        - 'Library: Media'
      security:
        - editorAuth: []
      responses:
        '200':
          description: Deleted media and its source
        '400':
          description: Editor not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'editor not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /library/source/{id}:
    parameters:
      -
        $ref: '#/components/parameters/ID'
    get:
      description: Get media source by id
      tags:
        - 'Library: Media'
      security:
        - editorAuth: []
      responses:
        '200':
          description: Found media
          content: 
            audio/mpeg:
              schema:
                type: string
                format: binary
        '400':
          description: Media not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'media not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /schedule:
    get:
      parameters:
      - in: query
        name: start
        schema:
          type: integer
        description: start cut
      - in: query
        name: stop
        schema:
          type: integer
        description: stop cut
      description: Get schedule cut
      tags:
        - 'Schedule'
      security:
        - editorAuth: []
      responses:
        '200':
          description: Got segments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Segments'
        '400':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - media not defined
                      - start not defined
                      - beginCut not defined
                      - stopCut not defined
                      - beginCut is later that stopCut
                      - media not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      description: Create new segment
      tags:
        - 'Schedule'
      security:
        - editorAuth: []
      requestBody: 
        description: ...
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/SegmentRegister'
      responses:
        '200':
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
        '400':
          description: Editor exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - media not found
                      - media not defined
                      - start not defined
                      - beginCut not defined
                      - stop cut not defined
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /schedule/{id}:
    parameters:
      -
        $ref: '#/components/parameters/ID'
    get:
      description: Get segment information by id
      tags:
        - Schedule
      security:
        - editorAuth: []
      responses:
        '200':
          description: Found segment
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Segment'
        '400':
          description: Segment not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'segment not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      description: Delete segment by id
      tags:
        - Schedule
      security:
        - editorAuth: []
      responses:
        '200':
          description: Deleted segment
        '400':
          description: Segment not found
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - 'bad id'
                      - 'segment not found'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /radio/mpd:
    get:
      description: Dash manifest for streaming
      tags:
        - Radio
      responses:
        '200':
          description: Got manifest
          content:
            application/xml: 
              schema:
                type: string
                format: byte
        '404':
          description: no manifest available
  /radio/{id}/{file}:
    get:
      tags:
        - 'Radio'
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/file'
      description: Load source files for radio
      responses:
        '200':
          description: Loaded source
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
  /radio/start:
    get:
      tags:
        - 'Root: Radio'
      security:
        - rootAuth: []
      description: Start radio
      responses:
        '200':
          description: Started radio
  /radio/stop:
    get:
      tags:
        - 'Root: Radio'
      security:
        - rootAuth: []
      description: Stop radio
      responses:
        '200':
          description: Stopped radio

components:
  schemas:
    LoginForm:
      type: object
      required:
        - login
        - pass
      properties:
        login:
          type: string
          example: user
        pass:
          type: string
          example: password
    Editor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        login:
          type: string
          example: "user"
    Editors:
      type: array
      items:
        $ref: '#/components/schemas/Editor'
    MediaRegister:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Highway to Hell
        author:
          type: string
          example: AC/DC
    Media:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Highway to Hell
        author:
          type: string
          example: AC/DC
        duration:
          type: integer
          example: 100
    MediaArray:
      type: array
      items:
        $ref: '#/components/schemas/Media'
    SegmentRegister:
      type: object
      properties:
        mediaID:
          type: integer
          example: 12
          description: ID of corresponding media
        start:
          type: integer
          example: 1703076879
          description: Unix time
        beginCut:
          type: integer
          example: 10923
          description: time cut in ns
        stopCut:
          type: integer
          example: 200000
          description: time cut in ns
    Segment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        mediaID:
          type: integer
          example: 12
          description: ID of corresponding media
        start:
          type: integer
          example: 1703076879
          description: Unix time
        beginCut:
          type: integer
          example: 10923
          description: time cut in ns
        stopCut:
          type: integer
          example: 200000
          description: time cut in ns
    Segments:
      type: array
      items:
        $ref: '#/components/schemas/Segment'

  responses: 
    InternalServerError:
      description: Internal Server Error
    Unauthorized:
      description: Need authorization
  parameters: 
    JWT:
      name: Authorisation
      in: header
      description: token
      required: true
      schema:
        type: string
    ID: 
      name: id
      in: path
      description: ID
      required: true
      schema:
        type: integer
        format: int64
    file:
      name: file
      in: path
      required: true
      schema:
        type: string
  securitySchemes:
    rootAuth:
      description: root access
      type: http
      bearerFormat: JWT
      scheme: bearer
    editorAuth:
      description: editor access
      type: http
      bearerFormat: JWT
      scheme: bearer